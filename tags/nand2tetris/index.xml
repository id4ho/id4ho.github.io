<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nand2tetris on jackvnimble</title>
    <link>/tags/nand2tetris/</link>
    <description>Recent content in Nand2tetris on jackvnimble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/nand2tetris/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Carry lookahead adder</title>
      <link>/posts/2018-07-17-carry-look-ahead/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-07-17-carry-look-ahead/</guid>
      <description>I recently implemented a 16-bit adder chip in HDL using a bunch (16) of full adders. A full adder takes 3 bits, adds them and returns a sum and a carry bit. I wired the adders sequentially since the carry bit from the LSBs (least significant bit) needs to be piped into the full adder that&amp;rsquo;s adding the next least significant bits and so on. This is similar to how you perform pencil and paper addition and is called a &amp;ldquo;ripple carry&amp;rdquo; adder since the carry from the far right could potentially change every other column to the left:</description>
    </item>
    
    <item>
      <title>The Arithmetic Logic Unit (ALU) - Nand2Tetris Week 2</title>
      <link>/posts/2018-06-17-week-2/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-17-week-2/</guid>
      <description>Arithmetic Logic Unit This week we used the chips we built last week (And, Or, Not, Xor, Mux, Dmux and their multibit varieties) to build adders and an ALU. The adders and ALU are very important components of a CPU and a lot of operations performed by the CPU can be reduced to the addition of binary numbers.
Adders We built both half and full adders. The half adder adds 2 bits and outputs both the sum of the bits and the carry bit.</description>
    </item>
    
    <item>
      <title>Multiplexing and Demultiplexing</title>
      <link>/posts/2018-06-11-mux-and-demux/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-11-mux-and-demux/</guid>
      <description>Multiplexing Multiplexing is a technique whereby multiple signals can be sent across the same shared medium. The relevant elementary logic gate is called a MUX. First, here is the logic table:
   a b select out     0 0 0 0   0 1 0 0   1 0 0 1   1 1 0 1   0 0 1 0   0 1 1 1   1 0 1 0   1 1 1 1    MUX is short for multiplexer.</description>
    </item>
    
    <item>
      <title>The Universal Gate - Nand2Tetris Week 1</title>
      <link>/posts/2018-06-11-the-universal-gate/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-11-the-universal-gate/</guid>
      <description>NAND - The Universal Gate This week we built a lot of logic gates or &amp;ldquo;chips&amp;rdquo; all using a single primitive: the humble NAND gate. NAND gates can be composed to build all other elementary logic gates and from those you can construct an ALU (arithmetic logic unit) and memory etc. This is why it&amp;rsquo;s called the Universal Gate and why the course title is Nand to Tetris1. AND/OR cannot be used as a primitive since they cannot invert.</description>
    </item>
    
    <item>
      <title>NAND to Tetris</title>
      <link>/posts/2018-06-04-nand-to-tetris/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-04-nand-to-tetris/</guid>
      <description>NAND to Tetris My first programming course was taught in Java. I often got distracted during trying to imagine how Java worked under the hood. Type &amp;lt;code&amp;gt; and you get &amp;lt;output&amp;gt;. Wait, how? What happens when I declare a variable? and why do I need that static word up there? How does a text file get translated into something the computer can use? And then after translation.. how does the computer actually process that generated file?</description>
    </item>
    
  </channel>
</rss>