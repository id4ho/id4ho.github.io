<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on jackvnimble</title>
    <link>/categories/programming/</link>
    <description>Recent content in Programming on jackvnimble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hex in Ruby</title>
      <link>/posts/2018-07-09-hex-in-ruby/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-07-09-hex-in-ruby/</guid>
      <description>Hexadecimal Recently, I&amp;rsquo;ve been jamming on the Cryptopals challenges in Ruby. Generally, you work with the data in hex and initially I was using to_s(16) method to convert bytes of data into hexadecimal:
irb(main):004:0&amp;gt; string = &amp;quot;jackvnimble&amp;quot; =&amp;gt; &amp;quot;jackvnimble&amp;quot; irb(main):005:0&amp;gt; bytes = string.bytes =&amp;gt; [106, 97, 99, 107, 118, 110, 105, 109, 98, 108, 101] irb(main):006:0&amp;gt; bytes.map { |byte| byte.to_s(16) } =&amp;gt; [&amp;quot;6a&amp;quot;, &amp;quot;61&amp;quot;, &amp;quot;63&amp;quot;, &amp;quot;6b&amp;quot;, &amp;quot;76&amp;quot;, &amp;quot;6e&amp;quot;, &amp;quot;69&amp;quot;, &amp;quot;6d&amp;quot;, &amp;quot;62&amp;quot;, &amp;quot;6c&amp;quot;, &amp;quot;65&amp;quot;] irb(main):007:0&amp;gt; bytes.</description>
    </item>
    
    <item>
      <title>Ruby string encoding gotcha</title>
      <link>/posts/2018-07-07-ruby-string-encoding/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-07-07-ruby-string-encoding/</guid>
      <description>Ruby String Encoding If you program in a language long enough you&amp;rsquo;ll probably eventually run into weird string behavior due to string encoding differences (language depending). I experienced a gotcha today trying to compare two Ruby strings, both of which had the same length, same .inspect output, same binary representation..
xord_result.bytes =&amp;gt; [203] &amp;quot;\xCB&amp;quot;.bytes =&amp;gt; [203] xord_result.length =&amp;gt; 1 &amp;quot;\xCB&amp;quot;.length =&amp;gt; 1 xord_result.class.name =&amp;gt; String &amp;quot;\xCB&amp;quot;.class.name =&amp;gt; String xord_result.bytes.map(&amp;amp;:ord).first.to_s(2) =&amp;gt; 11001011 &amp;quot;\xCB&amp;quot;.</description>
    </item>
    
    <item>
      <title>Multiplexing and Demultiplexing</title>
      <link>/posts/2018-06-11-mux-and-demux/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-11-mux-and-demux/</guid>
      <description>Multiplexing Multiplexing is a technique whereby multiple signals can be sent across the same shared medium. The relevant elementary logic gate is called a MUX. First, here is the logic table:
   a b select out     0 0 0 0   0 1 0 0   1 0 0 1   1 1 0 1   0 0 1 0   0 1 1 1   1 0 1 0   1 1 1 1    MUX is short for multiplexer.</description>
    </item>
    
    <item>
      <title>The Universal Gate - Week 1</title>
      <link>/posts/2018-06-11-the-universal-gate/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-11-the-universal-gate/</guid>
      <description>NAND - The Universal Gate This week we built a lot of logic gates or &amp;ldquo;chips&amp;rdquo; all using a single primitive: the humble NAND gate. NAND gates can be composed to build all other elementary logic gates and from those you can construct an ALU (arithmetic logic unit) and memory etc. This is why it&amp;rsquo;s called the Universal Gate and why the course title is Nand to Tetris1. AND/OR cannot be used as a primitive since they cannot invert.</description>
    </item>
    
    <item>
      <title>NAND to Tetris</title>
      <link>/posts/2018-06-04-nand-to-tetris/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-06-04-nand-to-tetris/</guid>
      <description>NAND to Tetris My first programming course was taught in Java. I often got distracted during trying to imagine how Java worked under the hood. Type &amp;lt;code&amp;gt; and you get &amp;lt;output&amp;gt;. Wait, how? What happens when I declare a variable? and why do I need that static word up there? How does a text file get translated into something the computer can use? And then after translation.. how does the computer actually process that generated file?</description>
    </item>
    
  </channel>
</rss>