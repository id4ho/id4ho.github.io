<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on id4ho</title>
    <link>/categories/security/</link>
    <description>Recent content in security on id4ho</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CBC Bitflipping Attack</title>
      <link>/posts/2018-11-01-cbc-bitflipping/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-11-01-cbc-bitflipping/</guid>
      <description>I recently worked through an exercise of attacking an AES CBC oracle using a bitflipping attack. This exercise came at the end of cryptopals set 2 and I was pretty surprised at how simple/easy it was. Up until this challenge I&amp;rsquo;d been breaking AES in ECB mode. Most people are familiar with how unsafe ECB is1 but, I was under the impression that barring a poor implementation, CBC was decent.</description>
    </item>
    
    <item>
      <title>Repeating key xor and Hamming distance</title>
      <link>/posts/2018-10-22-repeating-key-xor-hamming-distance/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/2018-10-22-repeating-key-xor-hamming-distance/</guid>
      <description>I&amp;rsquo;ve been working through the cryptopals challenge set in Rust as a way to both learn about cryptography and learn Rust at the same time. One of the first significant challenges is writing code to break a repeating key xor cipher where you don&amp;rsquo;t know the length of the key. Without the tip on Hamming distance in the problem description, one (read: &amp;lsquo;I&amp;rsquo;) might attempt to solve the problem with a heinously inefficient algorithm to try every reasonable keysize.</description>
    </item>
    
  </channel>
</rss>